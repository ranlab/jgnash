plugins {
    id("org.openjfx.javafxplugin")
    id("application")   // creates a task to run the full application
    id("distribution")
}

description = "jGnashFx BootLoader"

application {
    mainClassName = "jGnash"
}

javafx {
    version = javaFXVersion
    modules("javafx.base", "javafx.controls", "javafx.fxml", "javafx.web", "javafx.swing",
            "javafx.graphics", "javafx.media")
}

dependencies {
    implementation(project(":jgnash-fx"))
    implementation(project(":jgnash-resources"))
    implementation(project(":jgnash-core"))
    implementation("info.picocli:picocli:$picocliVersion")
}

task createStartScripts(type: CreateStartScripts) {
    outputDir = file("../../")
}

distributions {
    main {
        distributionBaseName = "jGnash"

        contents {
            from { "../jgnash-manual/src/Manual.pdf" }
            from { "../changelog.adoc" }
            from { "../rust-launcher/target/release/jGnash.exe" }
            from { "../README.html" }
            from { "../README.adoc" }
            from { "../jGnash" }
            exclude("**/*-linux*")  // excludes linux specific JavaFx modules from cross platform zip
            exclude("**/*-win*")    // excludes windows specific JavaFx modules from cross platform zip
            exclude("**/*-mac*")    // excludes mac specific JavaFx modules from cross platform zip
        }
    }
}

jar {
    // Keep jar clean:
    exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/*.MF"

    manifest {
        attributes "Main-Class": "jGnash",
                "Class-Path": configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(" ")
    }
}